// Generated by CoffeeScript 1.10.0
(function() {
  var CLIENT_ID, KEYCODES, intersperse, top;

  intersperse = function(list, sep) {
    if (list.length === 0) {
      return [];
    }
    return list.slice(1).reduce(function(xs, x, i) {
      return xs.concat([sep, x]);
    }, [list[0]]);
  };

  window.Collaborator = React.createClass({displayName: "Collaborator",
    render: function() {
      var item;
      item = this.props.collaborator;
      return React.createElement("div", {
        "style": {
          background: item.color
        }
      }, item.displayName);
    }
  });

  window.CollaboratorList = React.createClass({displayName: "CollaboratorList",
    render: function() {
      var item, nodes;
      nodes = (function() {
        var j, len, ref, results;
        ref = this.props.doc.getCollaborators();
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          item = ref[j];
          results.push(React.createElement(Collaborator, {
            "collaborator": item,
            "key": item.sessionId
          }));
        }
        return results;
      }).call(this);
      return React.createElement("div", null, nodes);
    }
  });

  window.App = React.createClass({displayName: "App",
    render: function() {
      return React.createElement("div", null, React.createElement(CollaboratorList, {
        "doc": this.props.doc
      }), React.createElement(Editor, {
        "doc": this.props.richtext
      }));
    }
  });

  window.Editor = React.createClass({displayName: "Editor",
    getInitialState: function() {
      return {
        cursor: this.props.doc.getText().length,
        selection_end: null
      };
    },
    attributeToTag: function(attribute) {
      var simple_elements;
      simple_elements = {
        bold: 'b',
        italic: 'i',
        container: 'div',
        cursor: 'cursor'
      };
      return simple_elements[attribute];
    },
    renderTextNode: function(text, index) {
      return React.createElement('span', {
        'data-start-index': index
      }, text);
    },
    renderTree: function(node) {
      var elements, j, len, part, parts, ref, start_index, tag;
      if (node.text != null) {
        start_index = node.start_index;
        parts = node.text.replace(/ /g, '\u00A0').split('\n');
        elements = [];
        elements.push(this.renderTextNode(parts[0], start_index));
        start_index += parts[0].length;
        ref = parts.slice(1);
        for (j = 0, len = ref.length; j < len; j++) {
          part = ref[j];
          elements.push(React.createElement('br'));
          elements.push(this.renderTextNode(part, start_index));
          start_index += part.length;
        }
        return elements;
      }
      tag = this.attributeToTag(node.attribute);
      return React.createElement(tag, {
        'data-start-index': node.start_index
      }, this.renderTreeList(node.children));
    },
    renderTreeList: function(nodes) {
      var j, len, node, results;
      results = [];
      for (j = 0, len = nodes.length; j < len; j++) {
        node = nodes[j];
        results.push(this.renderTree(node));
      }
      return results;
    },
    getAnchorIndex: function(anchor, offset) {
      if (anchor.nodeType === anchor.TEXT_NODE) {
        return (parseInt(anchor.parentNode.attributes['data-start-index'].value)) + offset;
      } else {
        return console.log("TODO: handle non-text clicks");
      }
    },
    onClick: function(event) {
      var cursor, index1, index2, selection, selection_end;
      selection = window.getSelection();
      if (selection.isCollapsed) {
        cursor = this.getAnchorIndex(selection.anchorNode, selection.anchorOffset);
        selection_end = null;
      } else {
        index1 = this.getAnchorIndex(selection.anchorNode, selection.anchorOffset);
        index2 = this.getAnchorIndex(selection.focusNode, selection.focusOffset);
        if (index1 < index2) {
          cursor = index1;
          selection_end = index2;
        } else {
          cursor = index2;
          selection_end = index1;
        }
      }
      return this.setState({
        cursor: cursor,
        selection_end: selection_end
      });
    },
    deleteSelection: function() {
      this.props.doc.deleteText(this.state.cursor, this.state.selection_end - this.state.cursor);
      return this.setState({
        selection_end: null
      });
    },
    insertText: function(text) {
      if (this.state.selection_end) {
        this.deleteSelection();
      }
      this.props.doc.insertText(this.state.cursor, text);
      return this.setState({
        cursor: this.state.cursor + text.length
      });
    },
    deleteText: function() {
      if (this.state.selection_end) {
        return this.deleteSelection();
      } else {
        this.props.doc.deleteText(this.state.cursor - 1, 1);
        return this.setState({
          cursor: this.state.cursor - 1
        });
      }
    },
    getText: function() {
      return this.props.doc.getText();
    },
    onKeypress: function(event) {
      var character;
      event.preventDefault();
      character = event.which === KEYCODES.enter ? "\n" : String.fromCharCode(event.which);
      return this.insertText(character);
    },
    onKeyDown: function(event) {
      var current_line_cursor, current_line_start, next_line_cursor, next_line_end, next_line_length, next_line_start, previous_line_cursor, previous_line_length, previous_line_start, ref, selection_end;
      if (event.keyCode === KEYCODES.backspace) {
        event.preventDefault();
        return this.deleteText();
      } else if (event.keyCode === KEYCODES.left) {
        if (event.shiftKey) {
          if (!this.state.selection_end) {
            this.setState({
              selection_end: this.state.cursor
            });
          }
          if (this.state.cursor > 0) {
            return this.setState({
              cursor: this.state.cursor - 1
            });
          }
        } else {
          if (this.state.selection_end) {
            return this.setState({
              selection_end: null
            });
          } else if (this.state.cursor > 0) {
            return this.setState({
              cursor: this.state.cursor - 1
            });
          }
        }
      } else if (event.keyCode === KEYCODES.right) {
        if (event.shiftKey) {
          selection_end = this.state.selection_end || this.state.cursor;
          if (selection_end < this.getText().length) {
            return this.setState({
              selection_end: selection_end + 1
            });
          }
        } else {
          if (this.state.selection_end) {
            return this.setState({
              cursor: this.state.selection_end,
              selection_end: null
            });
          } else if (this.state.cursor < this.getText().length) {
            return this.setState({
              cursor: this.state.cursor + 1
            });
          }
        }
      } else if ((ref = event.keyCode) === KEYCODES.up || ref === KEYCODES.down) {
        if (event.shiftKey) {
          return console.log("TODO: select up and down");
        } else {
          if (this.state.selection_end) {
            if (event.keyCode === KEYCODES.up) {
              return this.setState({
                selection_end: null
              });
            } else if (event.keyCode === KEYCODES.down) {
              return this.setState({
                cursor: this.state.selection_end,
                selection_end: null
              });
            }
          } else {
            current_line_start = this.findLineStart(this.state.cursor);
            current_line_cursor = this.state.cursor - current_line_start;
            if (event.keyCode === KEYCODES.up) {
              if (current_line_start === -1) {
                this.setState({
                  cursor: 0
                });
              }
              previous_line_start = this.findLineStart(current_line_start);
              previous_line_length = current_line_start - previous_line_start;
              previous_line_cursor = Math.min(current_line_cursor, previous_line_length);
              return this.setState({
                cursor: previous_line_start + previous_line_cursor
              });
            } else if (event.keyCode === KEYCODES.down) {
              next_line_start = this.findLineEnd(this.state.cursor);
              if (next_line_start === -1) {
                this.setState({
                  cursor: this.getText().length
                });
                return;
              }
              next_line_end = this.findLineEnd(next_line_start + 1);
              if (next_line_end === -1) {
                next_line_end = this.getText().length;
              }
              next_line_length = next_line_end - next_line_start;
              next_line_cursor = Math.min(current_line_cursor, next_line_length);
              return this.setState({
                cursor: next_line_start + next_line_cursor
              });
            }
          }
        }
      }
    },
    findLineStart: function(index) {
      return this.getText().lastIndexOf("\n", index - 1);
    },
    findLineEnd: function(index) {
      return this.getText().indexOf("\n", index);
    },
    onPaste: function(event) {
      var characters, data;
      data = event.clipboardData;
      characters = data.getData(data.types[0]);
      return this.insertText(characters);
    },
    render: function() {
      var children, tree;
      tree = overlayedTextToTree(this.props.doc.getOverlays(), this.props.doc.getText(), this.state.cursor);
      children = this.renderTreeList(tree.children);
      return React.createElement('div', {
        'data-start-index': tree.start_index,
        'data-end-index': tree.end_index,
        onClick: this.onClick,
        onKeyPress: this.onKeypress,
        onKeyDown: this.onKeyDown,
        onPaste: this.onPaste,
        tabIndex: 1
      }, children);
    }
  });

  KEYCODES = {
    left: 37,
    up: 38,
    right: 39,
    down: 40,
    backspace: 8,
    enter: 13
  };

  top = function(stack) {
    return stack[stack.length - 1];
  };

  CLIENT_ID = '872719575175-jee8p8pnu2k5bhhnledr8un2kpccgr6i.apps.googleusercontent.com';

  window.gapi.load('auth:client,drive-realtime,drive-share', function() {
    var initialize, loaded, make_initial_doc, realtimeUtils, render, start;
    setup_richtext();
    realtimeUtils = new utils.RealtimeUtils({
      clientId: CLIENT_ID
    });
    realtimeUtils.authorize(function(auth) {
      if (auth.error) {
        return realtimeUtils.authorize(start, true);
      } else {
        return start();
      }
    });
    start = function() {
      var id;
      id = realtimeUtils.getParam('id');
      if (id) {
        return realtimeUtils.load(id.replace('/', ''), loaded, initialize);
      } else {
        return realtimeUtils.createRealtimeFile('Rich Text Example', function(result) {
          window.history.pushState(null, null, '?id=' + result.id);
          realtimeUtils.load(result.id, loaded, initialize);
        });
      }
    };
    loaded = function(doc) {
      return setTimeout(function() {
        var model, parent, richtext;
        model = doc.getModel();
        parent = model.getRoot();
        richtext = parent.get('text') || make_initial_doc(parent, model);
        render(doc, richtext);
        return parent.addEventListener(gapi.drive.realtime.EventType.OBJECT_CHANGED, function() {
          return render(doc, richtext);
        });
      });
    };
    initialize = function(model) {
      return setTimeout(function() {
        var parent;
        parent = model.getRoot();
        return make_initial_doc(parent, model);
      });
    };
    make_initial_doc = function(parent, model) {
      var richtext;
      richtext = model.create(CollaborativeRichText);
      parent.set('text', richtext);
      richtext.insertText(0, "123456789");
      richtext.formatText(1, 6, {
        bold: true
      });
      richtext.formatText(5, 3, {
        italic: true
      });
      return richtext;
    };
    return render = function(doc, richtext) {
      return React.render(React.createElement(App, {
        "richtext": richtext,
        "doc": doc
      }), document.getElementById('main'));
    };
  });

}).call(this);
