// Generated by CoffeeScript 1.9.2
(function() {
  var top;

  window.Editor = React.createClass({
    getInitialState: function() {
      var text;
      text = "hello world";
      return {
        text: text,
        cursor: text.length,
        overlays: [
          {
            attribute: 'bold',
            start: 0,
            end: 3
          }, {
            attribute: 'italic',
            start: 6,
            end: 11
          }
        ]
      };
    },
    attributeToTag: function(attribute) {
      var simple_elements;
      simple_elements = {
        bold: 'b',
        italic: 'i',
        container: 'div'
      };
      return simple_elements[attribute];
    },
    renderTree: function(node) {
      var tag;
      if (node.text != null) {
        return node.text;
      }
      tag = this.attributeToTag(node.attribute);
      return React.createElement(tag, {
        'data-start-index': node.start_index,
        'data-end-index': node.end_index
      }, this.renderTreeList(node.children));
    },
    renderTreeList: function(nodes) {
      var i, len, node, results;
      results = [];
      for (i = 0, len = nodes.length; i < len; i++) {
        node = nodes[i];
        results.push(this.renderTree(node));
      }
      return results;
    },
    getAnchorIndex: function(anchor, offset) {
      var parent_index, parent_node, previous_sibling, previous_sibling_index;
      if (anchor.nodeType === anchor.TEXT_NODE) {
        parent_node = anchor.parentNode.parentNode;
        parent_index = parseInt(parent_node.attributes['data-start-index'].value);
        previous_sibling = anchor.parentNode.previousSibling;
        previous_sibling_index = previous_sibling != null ? parseInt(previous_sibling.attributes['data-end-index'].value) : 0;
        return previous_sibling_index + parent_index + offset;
      } else {
        return console.log("TODO: handle non-text clicks");
      }
    },
    onClick: function(event) {
      var cursor, index1, index2, selection, selection_end;
      selection = window.getSelection();
      if (selection.isCollapsed) {
        cursor = this.getAnchorIndex(selection.anchorNode, selection.anchorOffset);
        selection_end = null;
      } else {
        index1 = this.getAnchorIndex(selection.anchorNode, selection.anchorOffset);
        index2 = this.getAnchorIndex(selection.focusNode, selection.focusOffset);
        if (index1 < index2) {
          cursor = index1;
          selection_end = index2;
        } else {
          cursor = index2;
          selection_end = index1;
        }
      }
      console.log("set selection", cursor, selection_end);
      return this.setState({
        cursor: cursor,
        selection_end: selection_end
      });
    },
    onKeypress: function(event) {
      var character;
      event.preventDefault();
      character = String.fromCharCode(event.which);
      return console.log("insert character", character, this.state.cursor, this.state.selection_end);
    },
    onKeyDown: function(event) {
      if (event.keyCode === 8) {
        event.preventDefault();
        return console.log('backspace', this.state.cursor, this.state.selection_end);
      }
    },
    onPaste: function(event) {
      var characters, data;
      data = event.clipboardData;
      characters = data.getData(data.types[0]);
      return console.log("insert characters", characters, this.state.cursor, this.state.selection_end);
    },
    render: function() {
      var children, tree;
      tree = overlayedTextToTree(this.state.overlays, this.state.text);
      children = this.renderTreeList(tree.children);
      return React.createElement('div', {
        'data-start-index': 0,
        'data-end-index': this.state.text.length,
        onClick: this.onClick,
        onKeyPress: this.onKeypress,
        onKeyDown: this.onKeyDown,
        onPaste: this.onPaste,
        tabIndex: 1
      }, children);
    }
  });

  React.render(React.createElement(Editor, null), document.getElementById('main'));

  top = function(stack) {
    return stack[stack.length - 1];
  };

}).call(this);
